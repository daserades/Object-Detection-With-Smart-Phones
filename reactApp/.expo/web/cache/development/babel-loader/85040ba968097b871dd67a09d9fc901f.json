{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ObjectDetection\\\\reactApp\\\\demo.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { addons } from \"react-native-web/dist/index\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as FileSystem from 'expo-file-system';\nvar styles = StyleSheet.create({\n  img: {\n    width: 700,\n    height: 700\n  }\n});\nvar responseData;\nexport default function ImagePickerExample() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resultImage = _useState4[0],\n      setResultImage = _useState4[1];\n\n  state = {\n    details: [],\n    path: \"\"\n  };\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== \"web\")) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== \"granted\") {\n                alert(\"Sorry, we need camera roll permissions to make this work!\");\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: \"Images\",\n              allowsEditing: false,\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              uploadImages(result);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  pickCamera = function pickCamera() {\n    var result;\n    return _regeneratorRuntime.async(function pickCamera$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync({\n              mediaTypes: \"Images\",\n              allowsEditing: false,\n              quality: 1\n            }));\n\n          case 2:\n            result = _context3.sent;\n\n            if (!result.cancelled) {\n              {\n                setImage(result.uri);\n                uploadImages(result);\n              }\n            }\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  uploadImages = function uploadImages(result) {\n    var path, details, body;\n    return _regeneratorRuntime.async(function uploadImages$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            body = new FormData();\n            body.append('photo', {\n              uri: result.uri,\n              name: 'photo.jpg',\n              filename: 'photo.jpg',\n              type: 'image/jpg'\n            });\n            body.append('Content-Type', 'image/jpg');\n            fetch(\"http://demo.enginyenice.com/index.php\", {\n              method: 'POST',\n              headers: {\n                \"Content-Type\": \"multipart/form-data\",\n                \"otherHeader\": \"foo\"\n              },\n              body: body\n            }).then(function (res) {\n              return res.json();\n            }).then(function (res) {\n              console.log(res[0][\"path\"]);\n              console.log(res[0][\"detail\"]);\n              setResultImage(res[0][\"path\"]);\n            }).catch(function (e) {\n              return console.log(e);\n            }).done();\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      marginTop: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Gallery\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Camera\",\n    onPress: pickCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), resultImage && React.createElement(Image, {\n    source: {\n      uri: resultImage\n    },\n    style: {\n      width: 400,\n      height: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 400,\n      height: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/xampp/htdocs/ObjectDetection/reactApp/demo.js"],"names":["React","useState","useEffect","addons","ImagePicker","FileSystem","styles","StyleSheet","create","img","width","height","responseData","ImagePickerExample","image","setImage","resultImage","setResultImage","state","details","path","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","allowsEditing","quality","result","cancelled","uri","uploadImages","pickCamera","launchCameraAsync","body","FormData","append","name","filename","type","fetch","method","headers","then","res","json","console","log","catch","e","done","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  StyleSheet,\r\n  Image,\r\n  Text,\r\n  View,\r\n  Platform,\r\n  addons,\r\n} from \"react-native\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport * as FileSystem from 'expo-file-system';\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  img: {\r\n    width: 700,\r\n    height: 700,\r\n  },\r\n\r\n});\r\n\r\n\r\nlet  responseData;\r\nexport default function ImagePickerExample() {\r\n  const [image, setImage] = useState(null);\r\n  const [resultImage, setResultImage] = useState(null);\r\n  state = {\r\n    \r\n    details: [],\r\n    path: \"\"\r\n}\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS !== \"web\") {\r\n        const {\r\n          status,\r\n        } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n        if (status !== \"granted\") {\r\n          alert(\"Sorry, we need camera roll permissions to make this work!\");\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n  pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: \"Images\",\r\n      allowsEditing: false,\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.cancelled) {\r\n      setImage(result.uri);\r\n      uploadImages(result)\r\n    }\r\n  };\r\n  pickCamera = async () => {\r\n    //ImagePicker.launchCameraAsync(options)\r\n\r\n    let result = await ImagePicker.launchCameraAsync({\r\n      mediaTypes: \"Images\",\r\n      allowsEditing: false,\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.cancelled) {\r\n      {\r\n        \r\n        setImage(result.uri);\r\n        uploadImages(result)\r\n        \r\n      }\r\n    }\r\n  };\r\n\r\n  \r\n  uploadImages = async (result) => {\r\n    let path;\r\n    let details;\r\n    let body = new FormData();\r\n    body.append('photo', {uri: result.uri,name: 'photo.jpg',filename :'photo.jpg',type: 'image/jpg'});\r\n        body.append('Content-Type', 'image/jpg');\r\n    \r\n    fetch(\"http://demo.enginyenice.com/index.php\",{ method: 'POST',headers:{  \r\n         \"Content-Type\": \"multipart/form-data\",\r\n         \"otherHeader\": \"foo\",\r\n         } , body :body} )\r\n      .then((res) => res.json())\r\n      .then((res) => { \r\n        //this.setState({path: res[0][\"path\"], details: res[0][\"detail\"]});\r\n       console.log(res[0][\"path\"])\r\n       console.log(res[0][\"detail\"])\r\n       setResultImage(res[0][\"path\"])\r\n\r\n      })\r\n      .catch((e) => console.log(e))\r\n      .done()\r\n      \r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  return (\r\n    <View style={{\r\n      marginTop:0\r\n    }}>\r\n      <Button title=\"Gallery\" onPress={pickImage} />\r\n      <Button title=\"Camera\" onPress={pickCamera} />\r\n      {resultImage && (\r\n        <Image source={{ uri: resultImage }} style={{ width: 400, height: 400 }} />\r\n        \r\n      )}\r\n      \r\n      {image && (\r\n        <Image source={{ uri: image }} style={{ width: 400, height: 400 }} />\r\n        \r\n      )}\r\n      \r\n    </View>\r\n  );\r\n}\r\n\r\n\r\n/*\r\n\r\n  uploadImages = async (result) => {\r\n\r\n    let body = new FormData();\r\n    body.append('photo', {uri: result.uri,name: 'photo.jpg',filename :'photo.jpg',type: 'image/jpg'});\r\n        body.append('Content-Type', 'image/jpg');\r\n    \r\n    fetch(\"http://demo.enginyenice.com/index.php\",{ method: 'POST',headers:{  \r\n         \"Content-Type\": \"multipart/form-data\",\r\n         \"otherHeader\": \"foo\",\r\n         } , body :body} )\r\n      .then((res) => res.json())\r\n      .then((res) => { console.log(\"response\" +JSON.stringify(res)); })\r\n      .catch((e) => console.log(e))\r\n      .done()\r\n  };\r\n\r\n  */"]},"metadata":{},"sourceType":"module"}