{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ObjectDetection\\\\reactApp\\\\demo.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport Constants from \"expo-constants\";\nvar styles = StyleSheet.create({\n  img: {\n    width: 700,\n    height: 700\n  }\n});\nexport default function ImagePickerExample() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      responseData = _useState4[0],\n      setResponseData = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== \"web\")) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== \"granted\") {\n                alert(\"Sorry, we need camera roll permissions to make this work!\");\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: \"Images\",\n              allowsEditing: false,\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var pickCamera = function pickCamera() {\n    var result;\n    return _regeneratorRuntime.async(function pickCamera$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync({\n              mediaTypes: \"Images\",\n              allowsEditing: false,\n              quality: 1\n            }));\n\n          case 2:\n            result = _context3.sent;\n\n            if (!result.cancelled) {\n              {\n                setImage(result.uri);\n                uploadImage(result);\n              }\n            }\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function uploadImage(result) {\n    var localUri, filename, match, type, data;\n    return _regeneratorRuntime.async(function uploadImage$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            localUri = result.uri;\n            filename = localUri.split(\"/\").pop();\n            match = /\\.(\\w+)$/.exec(filename);\n            type = match ? \"image/\" + match[1] : \"image\";\n            console.log(result);\n            data = {\n              uri: localUri,\n              name: filename,\n              type: type\n            };\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(fetch('http://demo.enginyenice.com/index.php', {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(data)\n            }).then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return setResponseData(data);\n            }).then(function () {\n              console.log(responseData);\n            }));\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/xampp/htdocs/ObjectDetection/reactApp/demo.js"],"names":["React","useState","useEffect","ImagePicker","Constants","styles","StyleSheet","create","img","width","height","ImagePickerExample","image","setImage","responseData","setResponseData","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","allowsEditing","quality","result","cancelled","uri","pickCamera","launchCameraAsync","uploadImage","localUri","filename","split","pop","match","exec","type","console","log","data","name","fetch","method","headers","Accept","body","JSON","stringify","then","response","json"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  StyleSheet,\r\n  Image,\r\n  Text,\r\n  View,\r\n  Platform,\r\n} from \"react-native\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport Constants from \"expo-constants\";\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  img: {\r\n    width: 700,\r\n    height: 700,\r\n  },\r\n\r\n});\r\n\r\n\r\nexport default function ImagePickerExample() {\r\n  const [image, setImage] = useState(null);\r\n  const [responseData, setResponseData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS !== \"web\") {\r\n        const {\r\n          status,\r\n        } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n        if (status !== \"granted\") {\r\n          alert(\"Sorry, we need camera roll permissions to make this work!\");\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: \"Images\",\r\n      allowsEditing: false,\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.cancelled) {\r\n      setImage(result.uri);\r\n    }\r\n  };\r\n\r\n  const pickCamera = async () => {\r\n    //ImagePicker.launchCameraAsync(options)\r\n\r\n    let result = await ImagePicker.launchCameraAsync({\r\n      mediaTypes: \"Images\",\r\n      allowsEditing: false,\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.cancelled) {\r\n      {\r\n        setImage(result.uri);\r\n        uploadImage(result);\r\n      }\r\n    }\r\n  };\r\n\r\n  async function uploadImage(result) {\r\n    let localUri = result.uri;\r\n    let filename = localUri.split(\"/\").pop();\r\n\r\n    let match = /\\.(\\w+)$/.exec(filename);\r\n    let type = match ? `image/${match[1]}` : `image`;\r\n\r\n    console.log(result);\r\n    let data = {\r\n      uri: localUri,\r\n      name: filename,\r\n      type: type,\r\n    };\r\n/*\r\n\r\n    //http://enginyenice.shop/YazLab/VisionAPI/index.php\r\n    await fetch(\"http://demo.enginyenice.com/index.php\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) =>  response.json())\r\n      .then((data) => setResponseData(data));\r\n  };\r\n  */\r\n\r\n\r\nawait fetch('http://demo.enginyenice.com/index.php', {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  })\r\n  .then((response) =>  response.json())\r\n  .then((data) =>  setResponseData(data))\r\n  .then( ()  =>  {\r\n\r\n      console.log(responseData)\r\n      /*\r\n      return (\r\n        <View>\r\n           <Image\r\n           style={styles.img}\r\n          source={{\r\n            uri: responseData[0][\"path\"],\r\n          }}\r\n        />\r\n            {responseData[0][\"detail\"].map((detail,key) => <Text key={key} style={{\r\n              color: \"rgb(\"+detail[\"red\"]+\",\"+detail[\"green\"]+\",\"+detail[\"blue\"]+\")\",\r\n            }}>{detail[\"title\"]}</Text>)} \r\n        </View>\r\n      )\r\n      */\r\n  })\r\n\r\n  \r\n \r\n}\r\n\r\n\r\n  return (\r\n    <View>\r\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\r\n      <Button title=\"Pick an image from camera roll\" onPress={pickCamera} />\r\n      {image && (\r\n        <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}