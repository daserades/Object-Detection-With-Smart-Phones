{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ObjectDetection\\\\reactApp\\\\demo.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nexport default function ImagePickerExample() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, statusGallery, _await$ImagePicker$ge, statusCamera;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              statusGallery = _await$ImagePicker$re.statusGallery;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(ImagePicker.getCameraPermissionsAsync());\n\n            case 7:\n              _await$ImagePicker$ge = _context.sent;\n              statusCamera = _await$ImagePicker$ge.statusCamera;\n              console.log(\"x\");\n\n              if (statusGallery !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var takeImage = function takeImage() {\n    var result;\n    return _regeneratorRuntime.async(function takeImage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync(options)({\n              allowsEditing: true,\n              quality: 1\n            }));\n\n          case 2:\n            result = _context3.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }));\n}","map":{"version":3,"sources":["C:/xampp/htdocs/ObjectDetection/reactApp/demo.js"],"names":["React","useState","useEffect","ImagePicker","Constants","ImagePickerExample","image","setImage","Platform","OS","requestMediaLibraryPermissionsAsync","statusGallery","getCameraPermissionsAsync","statusCamera","console","log","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","quality","result","cancelled","uri","takeImage","launchCameraAsync","options","flex","alignItems","justifyContent","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAAA,kBACjBJ,QAAQ,CAAC,IAAD,CADS;AAAA;AAAA,MACpCK,KADoC;AAAA,MAC7BC,QAD6B;;AAG3CL,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACKM,QAAQ,CAACC,EAAT,KAAgB,KADrB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAEmCN,WAAW,CAACO,mCAAZ,EAFnC;;AAAA;AAAA;AAEWC,cAAAA,aAFX,yBAEWA,aAFX;AAAA;AAAA,+CAGmCR,WAAW,CAACS,yBAAZ,EAHnC;;AAAA;AAAA;AAGWC,cAAAA,YAHX,yBAGWA,YAHX;AAIGC,cAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,kBAAIJ,aAAa,KAAK,SAAtB,EAAiC;AAC/BK,gBAAAA,KAAK,CAAC,2DAAD,CAAL;AACD;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAUD,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGd,WAAW,CAACe,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAEhB,WAAW,CAACiB,gBAAZ,CAA6BC,GADY;AAErDC,cAAAA,aAAa,EAAE,IAFsC;AAGrDC,cAAAA,OAAO,EAAE;AAH4C,aAApC,CADH;;AAAA;AACZC,YAAAA,MADY;AAMhBV,YAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;;AAEA,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuB;AACrBlB,cAAAA,QAAQ,CAACiB,MAAM,CAACE,GAAR,CAAR;AACD;;AAVe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAaA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGxB,WAAW,CAACyB,iBAAZ,CAA8BC,OAA9B,EAClB;AACCP,cAAAA,aAAa,EAAE,IADhB;AAECC,cAAAA,OAAO,EAAE;AAFV,aADkB,CADH;;AAAA;AACZC,YAAAA,MADY;AAOpBV,YAAAA,OAAO,CAACC,GAAR,CAAYS,MAAZ;;AAEA,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuB;AACrBlB,cAAAA,QAAQ,CAACiB,MAAM,CAACE,GAAR,CAAR;AACD;;AAXmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAgBA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,QAAvB;AAAiCC,MAAAA,cAAc,EAAE;AAAjD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,gCAAd;AAA+C,IAAA,OAAO,EAAEf,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,gCAAd;AAA+C,IAAA,OAAO,EAAEA,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGGX,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEoB,MAAAA,GAAG,EAAEpB;AAAP,KAAf;AAA+B,IAAA,KAAK,EAAE;AAAE2B,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHZ,CADF;AAOD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Image, View, Platform } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport Constants from 'expo-constants';\r\n\r\nexport default function ImagePickerExample() {\r\n  const [image, setImage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS !== 'web') {\r\n        const { statusGallery } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n        const { statusCamera }  = await ImagePicker.getCameraPermissionsAsync();\r\n        console.log(\"x\")\r\n        if (statusGallery !== 'granted') {\r\n          alert('Sorry, we need camera roll permissions to make this work!');\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n      allowsEditing: true,\r\n      quality: 1,\r\n    });\r\n    console.log(result);\r\n\r\n    if (!result.cancelled) {\r\n      setImage(result.uri);\r\n    }\r\n  };\r\n\r\n  const takeImage = async () => {\r\n    let result = await ImagePicker.launchCameraAsync(options)\r\n    ({\r\n      allowsEditing: true,\r\n      quality: 1,\r\n    });\r\n\r\nconsole.log(result);\r\n\r\nif (!result.cancelled) {\r\n  setImage(result.uri);\r\n}\r\n};\r\n\r\n\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\r\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\r\n      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\r\n    </View>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}