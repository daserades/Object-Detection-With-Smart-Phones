{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\ObjectDetection\\\\reactApp\\\\demo.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { SafeArea } from \"react-native-web/dist/index\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nexport default function ImagePickerExample() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: 'Images',\n              allowsEditing: false,\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var pickCamera = function pickCamera() {\n    var result;\n    return _regeneratorRuntime.async(function pickCamera$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync({\n              mediaTypes: 'Images',\n              allowsEditing: false,\n              quality: 1\n            }));\n\n          case 2:\n            result = _context3.sent;\n\n            if (!result.cancelled) {\n              {\n                setImage(result.uri);\n                uploadImage(result);\n              }\n            }\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uploadImage = function uploadImage(result) {\n    var localUri, filename, match, type, formData;\n    return _regeneratorRuntime.async(function uploadImage$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            console.log(result);\n            localUri = result.uri;\n            filename = localUri.split('/').pop();\n            match = /\\.(\\w+)$/.exec(filename);\n            type = match ? \"image/\" + match[1] : \"image\";\n            formData = new FormData();\n            formData.append('photo', {\n              uri: localUri,\n              name: filename,\n              type: type\n            });\n            _context4.next = 9;\n            return _regeneratorRuntime.awrap(fetch('http://localhost/ObjectDetection/VisionAPI/index.php', {\n              method: 'POST',\n              body: formData,\n              header: {\n                'content-type': 'multipart/form-data'\n              }\n            }));\n\n          case 9:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"asdasdas\"), React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }));\n}","map":{"version":3,"sources":["C:/xampp/htdocs/ObjectDetection/reactApp/demo.js"],"names":["React","useState","useEffect","SafeArea","ImagePicker","Constants","ImagePickerExample","image","setImage","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","allowsEditing","quality","result","cancelled","uri","pickCamera","launchCameraAsync","uploadImage","console","log","localUri","filename","split","pop","match","exec","type","formData","FormData","append","name","fetch","method","body","header","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button,SafeArea, Image,Text, View, Platform, SafeAreaView } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport Constants from 'expo-constants';\r\n\r\nexport default function ImagePickerExample() {\r\n  const [image, setImage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS !== 'web') {\r\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n        if (status !== 'granted') {\r\n          alert('Sorry, we need camera roll permissions to make this work!');\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: 'Images',\r\n      allowsEditing: false,\r\n      quality: 1,\r\n    });\r\n\r\n    \r\n    if (!result.cancelled) {\r\n      setImage(result.uri);\r\n    }\r\n  };\r\n\r\n  const pickCamera = async () => {\r\n    //ImagePicker.launchCameraAsync(options)\r\n\r\n    let result = await ImagePicker.launchCameraAsync({\r\n      mediaTypes: 'Images',\r\n      allowsEditing: false,\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.cancelled) {\r\n      {\r\n        setImage(result.uri);\r\n        uploadImage(result)\r\n      }\r\n    }\r\n  };\r\n\r\n  const uploadImage = async (result) => {\r\n    console.log(result)\r\n\r\n    let localUri = result.uri;\r\n    let filename = localUri.split('/').pop();\r\n  \r\n    let match = /\\.(\\w+)$/.exec(filename);\r\n    let type = match ? `image/${match[1]}` : `image`;\r\n  \r\n    let formData = new FormData();\r\n    formData.append('photo', { uri: localUri, name: filename, type });\r\n  \r\n    return await fetch('http://localhost/ObjectDetection/VisionAPI/index.php', {\r\n      method: 'POST',\r\n      body: formData,\r\n      header: {\r\n        'content-type': 'multipart/form-data',\r\n      },\r\n\r\n\r\n\r\n  });\r\n}\r\n\r\n\r\n  return (\r\n    \r\n    <View>\r\n        <Text>asdasdas</Text>\r\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\r\n      <Button title=\"Pick an image from camera roll\" onPress={pickCamera} />\r\n      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\r\n    </View>\r\n    \r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}